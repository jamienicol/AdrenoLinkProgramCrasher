#version 300 es
uniform highp mat4 uTransform;
in highp vec2 aPosition;
uniform lowp sampler2D sColor0;
uniform highp sampler2D sGpuCache;
flat out highp vec4 vTransformBounds;
uniform highp sampler2D sTransformPalette;
in highp vec4 aClipDeviceArea;
in highp vec4 aClipOrigins;
in highp float aDevicePixelScale;
in highp ivec2 aTransformIds;
out highp vec4 vLocalPos;
out highp vec2 vUv;
flat out highp vec4 vUvBounds;
flat out highp vec4 vEdge;
flat out highp vec4 vUvBounds_NoClamp;
flat out highp float vClipMode;
in highp ivec2 aClipDataResourceAddress;
in highp vec2 aClipSrcRectSize;
in highp int aClipMode;
in highp ivec2 aStretchMode;
in highp vec4 aClipDestRect;
void main ()
{
  mat4 transform_m_1;
  mat4 transform_inv_m_2;
  int tmpvar_3;
  tmpvar_3 = (aTransformIds.x & 16777215);
  ivec2 tmpvar_4;
  tmpvar_4.x = int((8u * (
    uint(tmpvar_3)
   % 128u)));
  tmpvar_4.y = int((uint(tmpvar_3) / 128u));
  transform_m_1[0] = texelFetch (sTransformPalette, tmpvar_4, 0);
  transform_m_1[1] = texelFetch (sTransformPalette, (tmpvar_4 + ivec2(1, 0)), 0);
  transform_m_1[2] = texelFetch (sTransformPalette, (tmpvar_4 + ivec2(2, 0)), 0);
  transform_m_1[3] = texelFetch (sTransformPalette, (tmpvar_4 + ivec2(3, 0)), 0);
  transform_inv_m_2[0] = texelFetch (sTransformPalette, (tmpvar_4 + ivec2(4, 0)), 0);
  transform_inv_m_2[1] = texelFetch (sTransformPalette, (tmpvar_4 + ivec2(5, 0)), 0);
  transform_inv_m_2[2] = texelFetch (sTransformPalette, (tmpvar_4 + ivec2(6, 0)), 0);
  transform_inv_m_2[3] = texelFetch (sTransformPalette, (tmpvar_4 + ivec2(7, 0)), 0);
  mat4 transform_m_5;
  int tmpvar_6;
  tmpvar_6 = (aTransformIds.y & 16777215);
  ivec2 tmpvar_7;
  tmpvar_7.x = int((8u * (
    uint(tmpvar_6)
   % 128u)));
  tmpvar_7.y = int((uint(tmpvar_6) / 128u));
  transform_m_5[0] = texelFetch (sTransformPalette, tmpvar_7, 0);
  transform_m_5[1] = texelFetch (sTransformPalette, (tmpvar_7 + ivec2(1, 0)), 0);
  transform_m_5[2] = texelFetch (sTransformPalette, (tmpvar_7 + ivec2(2, 0)), 0);
  transform_m_5[3] = texelFetch (sTransformPalette, (tmpvar_7 + ivec2(3, 0)), 0);
  vec2 tmpvar_8;
  tmpvar_8 = aClipDestRect.xy;
  vec2 uv_rect_p0_9;
  vec2 uv_rect_p1_10;
  vec4 tmpvar_11;
  tmpvar_11 = texelFetch (sGpuCache, aClipDataResourceAddress, 0);
  uv_rect_p0_9 = tmpvar_11.xy;
  uv_rect_p1_10 = tmpvar_11.zw;
  highp vec4 pos_12;
  vec4 tmpvar_13;
  tmpvar_13.zw = vec2(0.0, 1.0);
  tmpvar_13.xy = ((aClipOrigins.zw + mix (aClipDeviceArea.xy, aClipDeviceArea.zw, aPosition)) / aDevicePixelScale);
  vec4 tmpvar_14;
  tmpvar_14 = (transform_m_5 * tmpvar_13);
  pos_12.w = tmpvar_14.w;
  pos_12.xyz = (tmpvar_14.xyz / tmpvar_14.w);
  highp vec2 tmpvar_15;
  tmpvar_15 = pos_12.xy;
  vec4 tmpvar_16;
  tmpvar_16 = (transform_m_1 * vec4(0.0, 0.0, 0.0, 1.0));
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_17 = transform_inv_m_2[uint(0)].xyz;
  tmpvar_18 = transform_inv_m_2[1u].xyz;
  tmpvar_19 = transform_inv_m_2[2u].xyz;
  mat3 tmpvar_20;
  tmpvar_20[0].x = tmpvar_17.x;
  tmpvar_20[1].x = tmpvar_17.y;
  tmpvar_20[2].x = tmpvar_17.z;
  tmpvar_20[0].y = tmpvar_18.x;
  tmpvar_20[1].y = tmpvar_18.y;
  tmpvar_20[2].y = tmpvar_18.z;
  tmpvar_20[0].z = tmpvar_19.x;
  tmpvar_20[1].z = tmpvar_19.y;
  tmpvar_20[2].z = tmpvar_19.z;
  vec3 tmpvar_21;
  tmpvar_21.z = -10000.0;
  tmpvar_21.xy = tmpvar_15;
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_20 * vec3(0.0, 0.0, 1.0));
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_16.xyz / tmpvar_16.w);
  highp float tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = dot (tmpvar_22, vec3(0.0, 0.0, 1.0));
  float tmpvar_26;
  tmpvar_26 = abs(tmpvar_25);
  if ((1e-06 < tmpvar_26)) {
    tmpvar_24 = (dot ((tmpvar_23 - tmpvar_21), tmpvar_22) / tmpvar_25);
  };
  vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xy = tmpvar_15;
  tmpvar_27.z = (-10000.0 + tmpvar_24);
  vec4 tmpvar_28;
  tmpvar_28 = ((transform_inv_m_2 * tmpvar_27) * tmpvar_14.w);
  vec4 tmpvar_29;
  tmpvar_29.zw = vec2(0.0, 1.0);
  tmpvar_29.xy = (aClipOrigins.xy + mix (aClipDeviceArea.xy, aClipDeviceArea.zw, aPosition));
  gl_Position = (uTransform * tmpvar_29);
  vec4 tmpvar_30;
  tmpvar_30.xy = tmpvar_8;
  tmpvar_30.zw = (aClipDestRect.xy + aClipDestRect.zw);
  vTransformBounds = tmpvar_30;
  vClipMode = float(aClipMode);
  vec2 tmpvar_31;
  tmpvar_31 = vec2(textureSize (sColor0, 0));
  vec2 tmpvar_32;
  tmpvar_32 = (tmpvar_28.xy / tmpvar_28.w);
  vLocalPos = tmpvar_28;
  bool tmpvar_33;
  bool tmpvar_34;
  tmpvar_34 = bool(0);
  tmpvar_33 = (0 == aStretchMode.x);
  if (tmpvar_33) {
    vEdge.x = 0.5;
    vEdge.z = ((aClipDestRect.z / aClipSrcRectSize.x) - 0.5);
    vUv.x = ((tmpvar_32.x - aClipDestRect.x) / aClipSrcRectSize.x);
    tmpvar_34 = bool(1);
  };
  tmpvar_33 = !(tmpvar_34);
  if (tmpvar_33) {
    vEdge.xz = vec2(1.0, 1.0);
    vUv.x = ((tmpvar_32.x - aClipDestRect.x) / aClipDestRect.z);
    tmpvar_34 = bool(1);
  };
  bool tmpvar_35;
  bool tmpvar_36;
  tmpvar_36 = bool(0);
  tmpvar_35 = (0 == aStretchMode.y);
  if (tmpvar_35) {
    vEdge.y = 0.5;
    vEdge.w = ((aClipDestRect.w / aClipSrcRectSize.y) - 0.5);
    vUv.y = ((tmpvar_32.y - aClipDestRect.y) / aClipSrcRectSize.y);
    tmpvar_36 = bool(1);
  };
  tmpvar_35 = !(tmpvar_36);
  if (tmpvar_35) {
    vEdge.yw = vec2(1.0, 1.0);
    vUv.y = ((tmpvar_32.y - aClipDestRect.y) / aClipDestRect.w);
    tmpvar_36 = bool(1);
  };
  vUv = (vUv * tmpvar_28.w);
  vec4 tmpvar_37;
  tmpvar_37.xy = (tmpvar_11.xy + vec2(0.5, 0.5));
  tmpvar_37.zw = (tmpvar_11.zw - vec2(0.5, 0.5));
  vUvBounds = (tmpvar_37 / tmpvar_31.xyxy);
  vec4 tmpvar_38;
  tmpvar_38.xy = uv_rect_p0_9;
  tmpvar_38.zw = uv_rect_p1_10;
  vUvBounds_NoClamp = (tmpvar_38 / tmpvar_31.xyxy);
}

